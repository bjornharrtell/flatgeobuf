package org.wololo.flatgeobuf.generated;
// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Geometry extends Table {
  public static Geometry getRootAsGeometry(ByteBuffer _bb) { return getRootAsGeometry(_bb, new Geometry()); }
  public static Geometry getRootAsGeometry(ByteBuffer _bb, Geometry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Geometry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ends(int j) { int o = __offset(4); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int endsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer endsAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer endsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  public double xy(int j) { int o = __offset(6); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int xyLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer xyAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer xyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  public double z(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int zLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer zAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer zInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }
  public double m(int j) { int o = __offset(10); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int mLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer mAsByteBuffer() { return __vector_as_bytebuffer(10, 8); }
  public ByteBuffer mInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 8); }
  public double t(int j) { int o = __offset(12); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int tLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer tAsByteBuffer() { return __vector_as_bytebuffer(12, 8); }
  public ByteBuffer tInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 8); }
  public long tm(int j) { int o = __offset(14); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int tmLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer tmAsByteBuffer() { return __vector_as_bytebuffer(14, 8); }
  public ByteBuffer tmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 8); }
  public int type() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public Geometry parts(int j) { return parts(new Geometry(), j); }
  public Geometry parts(Geometry obj, int j) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int partsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }

  public static int createGeometry(FlatBufferBuilder builder,
      int endsOffset,
      int xyOffset,
      int zOffset,
      int mOffset,
      int tOffset,
      int tmOffset,
      int type,
      int partsOffset) {
    builder.startObject(8);
    Geometry.addParts(builder, partsOffset);
    Geometry.addTm(builder, tmOffset);
    Geometry.addT(builder, tOffset);
    Geometry.addM(builder, mOffset);
    Geometry.addZ(builder, zOffset);
    Geometry.addXy(builder, xyOffset);
    Geometry.addEnds(builder, endsOffset);
    Geometry.addType(builder, type);
    return Geometry.endGeometry(builder);
  }

  public static void startGeometry(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addEnds(FlatBufferBuilder builder, int endsOffset) { builder.addOffset(0, endsOffset, 0); }
  public static int createEndsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startEndsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addXy(FlatBufferBuilder builder, int xyOffset) { builder.addOffset(1, xyOffset, 0); }
  public static int createXyVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startXyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addZ(FlatBufferBuilder builder, int zOffset) { builder.addOffset(2, zOffset, 0); }
  public static int createZVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startZVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addM(FlatBufferBuilder builder, int mOffset) { builder.addOffset(3, mOffset, 0); }
  public static int createMVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startMVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addT(FlatBufferBuilder builder, int tOffset) { builder.addOffset(4, tOffset, 0); }
  public static int createTVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addTm(FlatBufferBuilder builder, int tmOffset) { builder.addOffset(5, tmOffset, 0); }
  public static int createTmVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTmVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(6, (byte)type, (byte)0); }
  public static void addParts(FlatBufferBuilder builder, int partsOffset) { builder.addOffset(7, partsOffset, 0); }
  public static int createPartsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPartsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGeometry(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

