use flatgeobuf::*;
use std::fs::File;
use std::io::BufReader;

fn feature_from_u8<'a>(buf: &'a [u8], loc: usize) -> Feature<'a> {
    Feature::init_from_table(flatbuffers::Table::new(buf, loc))
}

#[allow(dead_code)]
fn debug_geom_reader(geometry: &Geometry, geometry_type: GeometryType) {
    let mut dbg = DebugReader {};
    geometry.parse(&mut dbg, geometry_type);
}

#[test]
fn geometries() -> std::result::Result<(), std::io::Error> {
    // countries.fgb, id = ZAF
    let fbuf = hex::decode("100000000000000008000c0004000800080000003c000000040000001b0000000000030000005a414601000c000000536f757468204166726963610014000c0000000000000000000000000007000800140000000000000604000000010000001800000000001200100008000c00000000000000000007001200000000000003f005000004000000bc000000ec2e505260853f40626a4b1de4413dc062da37f757533f4024b6bb07e8663dc02bbea1f0d9e63e402ac423f1f2e83dc00e863aac709f3e4067d47c957c6c3ec02bdd5d67430e3e4083a44fabe8233fc0f6b6990af1ec3c401b498270051640c08b19e1ed41383c4049861c5bcf6240c0c075c58cf0763b4047af06280d9d40c0e63dce34616b3a406d567daeb6ce40c03a596abddfe83940da8f149161d540c08657923cd7c739400b26fe28eaf840c09db81caf402c39407764ac36ffe540c0d87e32c687ad3840b3b27dc85bfe40c0f06ab93313983740dbc2f352b1e540c056444df4f9fc364032056b9c4df540c0fcc401f4fb923640c90391459aee40c02f4d11e0f48a3540f5f6e7a2212141c0f03504c765b03440bada8afd653541c0f27a30293e123440766b990cc76541c04417d4b7cc9d334061ff756eda6841c04a09c1aa7a313340c614ac71363b41c03bc780ecf5da324052b5dd04df3841c0af795567b56c3240dc476e4dbaff40c09126de019e603240ce1b2785791141c09be7887c973e3240f1845e7f12ef40c039622d3e05403240508a56ee05a440c014967840d9ec314069ab92c83e4e40c0f3599e07773f32409259bdc3ed3640c0dc7ef964c538324051f4c0c760a93fc08483bd89219131403a05f9d9c8b93ec0d25625917d103140bbecd79deee03dc06954e0641b103140e6cc76853ee03dc048dfa469505830408f705af0a2933cc0195932c7f2d2304055f99e9108153cc05f251fbb0b383140793d98141f5b3cc0514cde003363314049f59d5f94c83cc0287cb60e0ed631408e03af963bdb3cc06ff1f09e03773240f435cb65a30b3dc0487023658b00334060394206f2f83cc0889e94490de53340a7052ffa0a763cc0a7cd380d51e533402332ace28dc438c0ce18e6046d2a344083f8c08effea38c086730d3334c23440f27a30293ede39c0dfc325c79daa344089601c5c3a7a3ac02e3a596abde334406954e0641bd43ac0f8c610001c9b35409c6ed921feb93ac0cc63cdc8201b3640fe8172dbbe473ac048fc8a355c943640f321a81abdfa39c08d0a9c6c03d3364026fdbd141e8039c0022ec896e54f374022c32adec84439c0a453573ecbbb3740a038807edf6339c05ab91798153638408541994693ab39c0c0ce4d9b710639408ee9094b3cb839c05dc30c8d27aa3940672b2ff99f7c39c09fac18ae0ec439407fde54a4c22c39c08736001b10f1394042d13c8045b238c013ef004f5a7c3a404ca4349bc79d38c071581af851c93a400971e5ec9d3d38c0bbd05ca7911e3b40325706d5069337c05950189469043c401822a7afe7d336c041b96ddfa36e3d401cb3ec49601736c04b22fb20cbd63d40c020e9d32a1a36c0336fd575a8523e407f33315d884536c069c6a2e9eca83e4020274c18cd2636c0fa28232e00313f40f19d98f5624036c0c64d0d349fab3f40ec134031b2a837c07104a9143bee3f402096cd1c925e38c0af3f89cf9dc03f40dff94509fa7b39c0ec4e779e78d63f4097ab1f9be4d739c09966bad749553f40111d024702a939c05e68aed3480b3f400398327040bb39c0271763601df33e4080492a53cc053ac0e42d573f36ad3e40d1419770e8653ac07b4ca4349baf3e400a4b3ca06cbe3ac01a31b3cf63483f40fa9cbb5d2f493bc03cf71e2e39de3f404d13b69f8c2d3bc049a297512c0940409626a5a0dbbb3ac0b5e0455f416a4040535a7f4b00be3ac0b8019f1f464a4040e9f351465c783bc081b3942c273b40407bbc900e0f4d3cc0deae97a6081a4040cd58349d9dc03cc0ec2e505260853f40626a4b1de4413dc008e3a7716ffa3c40dd274701a2f43cc0423ee8d9ac8a3c403718eab0c2a53cc09dd9aed007133c40ce8e54dff9d93cc0a0c211a452883b402461df4e223e3dc0b4226aa2cfff3a40e6cc76853ee03dc073b8567bd8bf3b401074b4aa25a53ec0baf770c9711b3c407461a417b58b3ec022e17b7f834a3c409acc785be9393ec029ed0dbe30d93c40560dc2dcee113ec07fc16ed8b6043d4072e0d57267be3dc069c537143e533d40626a4b1de4413dc008e3a7716ffa3c40dd274701a2f43cc00000000002000000520000005e000000").unwrap();
    let feature = feature_from_u8(&fbuf, 16);

    let geometry = feature.geometry().unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    geometry.to_svg(&mut svg_data, GeometryType::MultiPolygon, true);
    // Has Multi-Ring Polygon
    assert_eq!(
        std::str::from_utf8(&svg_data).unwrap(),
        r#"<path d="M 31.521001 29.257387 31.325561 29.401978 30.901763 29.909957 30.622813 30.423776 30.055716 31.140269 28.925553 32.172041 28.219756 32.771953 27.464608 33.226964 26.419452 33.61495 25.909664 33.66704 25.780628 33.944646 25.172862 33.796851 24.677853 33.987176 23.594043 33.794474 22.988189 33.916431 22.574157 33.864083 21.542799 34.258839 20.689053 34.417175 20.071261 34.795137 19.616405 34.819166 19.193278 34.462599 18.855315 34.444306 18.424643 33.997873 18.377411 34.136521 18.244499 33.867752 18.25008 33.281431 17.92519 32.611291 18.24791 32.429131 18.221762 31.661633 17.566918 30.725721 17.064416 29.878641 17.062918 29.875954 16.344977 28.576705 16.824017 28.082162 17.218929 28.355943 17.387497 28.783514 17.836152 28.856378 18.464899 29.045462 19.002127 28.972443 19.894734 28.461105 19.895768 24.76779 20.165726 24.917962 20.758609 25.868136 20.66647 26.477453 20.889609 26.828543 21.605896 26.726534 22.105969 26.280256 22.579532 25.979448 22.824271 25.500459 23.312097 25.26869 23.73357 25.390129 24.211267 25.670216 25.025171 25.71967 25.664666 25.486816 25.765849 25.174845 25.941652 24.696373 26.485753 24.616327 26.786407 24.240691 27.11941 23.574323 28.017236 22.827754 29.432188 22.091313 29.839037 22.102216 30.322883 22.271612 30.659865 22.151567 31.191409 22.25151 31.670398 23.658969 31.930589 24.369417 31.752408 25.484284 31.837778 25.843332 31.333158 25.660191 31.04408 25.731452 30.949667 26.022649 30.676609 26.398078 30.685962 26.743845 31.282773 27.285879 31.86806 27.177927 32.071665 26.73382 32.83012 26.742192 32.580265 27.470158 32.462133 28.301011 32.203389 28.752405 31.521001 29.257387 Z M 28.978263 28.955597 28.5417 28.647502 28.074338 28.851469 27.532511 29.242711 26.999262 29.875954 27.749397 30.645106 28.107205 30.545732 28.291069 30.226217 28.8484 30.070051 29.018415 29.743766 29.325166 29.257387 28.978263 28.955597 Z "/>"#
    );

    // countries.fgb, id = NZL
    let fbuf = hex::decode("0c00000008000c0004000800080000003c000000040000001a0000000000030000004e5a4c01000b0000004e6577205a65616c616e64000014000c0000000000000000000000000007000800140000000000000604000000020000007002000004000000aafdffff00000003040000004800000072fbe59395d36540a41820d1041442c0eee9ea8ec5ea65405ad427b9c39a42c0c6a52a6d71eb6540fbac32535a4342c01b65fd66e2f965404eb340bb436642c0617138f3abfe6540bf64e3c116c742c010afeb176c1866403e40f7e5ccf042c0e9818fc10a2e664036aca92c0afb42c0406ce9d1544066409c33a2b437ca42c0a65eb7088c506640bdc282fb01d942c05186aa98ca4866408257cb9d994a43c0704221020e3f6640927538ba4a9543c008b0c8af9f2666405645b8c9a89243c090bb0853141e6640bcea01f390b943c01711c5e40d2166400cace3f8a1f043c062c092ab581c6640b42094f7710844c0fc19deac41106640f92d3a596a4d44c0312592e8650066408011346612a544c06dc66988aae765409fc9fe791ad844c0d82e6d382ce26540d44334ba83b644c0873254c5d4d46540bb29e5b512a444c0d5b2b5be48e76540ab92c83ec83a44c07f880d16cedc6540a9a0a2ea57f443c0be6bd0975eba65402a38bc2022c143c0f433f5ba45bb65409cc3b5dac39243c09df529c764d265409fc9fe791a6643c0a46dfc89cad76540994869368f0343c0317898f64dd665405247c7d5c8b042c085b01a4b58c965403f390a10055b42c06269e04735ca6540d68ee21c754442c017618a72e9ba6540dfddca129d0f42c0882cd2c4bba165403108ac1c5a9e41c0f66228275a946540d78a36c7b94341c05af624b039a0654065c6db4aaf3941c0350bb43ba4b165404565c39aca8041c024b4e55c8aca6540029cdec5fba141c072fbe59395d36540a41820d1041442c000000000000012000c0000000800000000000000000007001200000000000003040000003c000000fed478e9a6a0654065a9f57ea37544c0b20e4757e9a7654001a777f17eaa44c0556af640abbe6540d3156c239e7644c0467d923becc76540111e6d1cb1ac44c00070ecd9f3c7654045d4449f8fe244c0ad3594da0bbc6540a9f92af9d81d45c05af0a2af20a765404af086342a7c45c025adf886c2966540bc581822a7af45c0815f234990a26540711e4e603aed45c034828debdf896540f52b9d0fcfee45c04ed1915c7e6e65404ed4d2dc0a1f46c0e6e786a6ec6565402e8eca4dd47246c052d158fbbb53654068b114c957f446c099654f029b3a654001de02098a2d47c04e0e9f74a22a654079060dfd135247c08522ddcf290d6540cc28965b5a4f47c079af5a9970f86440db32e02c252547c0d923d40ca9d56440cf6a813d261c47c08c9e5be84ad064405e11fc6f25ed46c0fc372f4e7ce164408c648f50338e46c084d72e6db8096540234be658de0f46c0e6b0fb8e611e6540dbfcbfeac8f745c0e71890bd5e3565402b4f20ec14c745c086200725cc5065407cd6355a0e8445c0d061bebc0064654054724eeca14145c059c2da183b7265402f151bf33ae244c0780dfad25b7e6540d3c08f6ad8c144c03929cc7b1c83654093c9a99d617a44c0abe7a4f78d996540bfbb95253a3f44c0fed478e9a6a0654065a9f57ea37544c0").unwrap();
    let feature = feature_from_u8(&fbuf, 12);

    let geometry = feature.geometry().unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    geometry.to_svg(&mut svg_data, GeometryType::MultiPolygon, true);
    // Has multiple Polygons
    assert_eq!(
        std::str::from_utf8(&svg_data).unwrap(),
        r#"<path d="M 173.020375 40.919052 173.247234 41.331999 173.958405 40.926701 174.247587 41.349155 174.248517 41.770008 173.876447 42.233184 173.22274 42.970038 172.711246 43.372288 173.080113 43.853344 172.308584 43.865694 171.452925 44.242519 171.185138 44.897104 170.616697 45.908929 169.831422 46.355775 169.332331 46.641235 168.411354 46.619945 167.763745 46.290197 166.676886 46.219917 166.509144 45.852705 167.046424 45.110941 168.303763 44.123973 168.949409 43.935819 169.667815 43.555326 170.52492 43.031688 171.12509 42.512754 171.569714 41.767424 171.948709 41.514417 172.097227 40.956104 172.79858 40.493962 173.020375 40.919052 Z "/><path d="M 174.612009 36.156397 175.336616 37.209098 175.357596 36.526194 175.808887 36.798942 175.95849 37.555382 176.763195 37.881253 177.438813 37.961248 178.010354 37.579825 178.517094 37.695373 178.274731 38.582813 177.97046 39.166343 177.206993 39.145776 176.939981 39.449736 177.032946 39.879943 176.885824 40.065978 176.508017 40.604808 176.01244 41.289624 175.239567 41.688308 175.067898 41.425895 174.650973 41.281821 175.22763 40.459236 174.900157 39.908933 173.824047 39.508854 173.852262 39.146602 174.574802 38.797683 174.743474 38.027808 174.697017 37.381129 174.292028 36.711092 174.319004 36.534824 173.840997 36.121981 173.054171 35.237125 172.636005 34.529107 173.007042 34.450662 173.551298 35.006183 174.32939 35.265496 174.612009 36.156397 Z "/>"#
    );

    // lines.fgb, first feature
    let fbuf = hex::decode("0c00000008000c000400080008000000d000000004000000bb00000000002d0000000000000001001f000000496e7465726e6174696f6e616c20626f756e6461727920287665726966792904000100000005000c000000536f757468204166726963610600070000004e616d696269610700030000005a41460800030000004e414d0900030000005a41460a00030000004e414d0b00040000004c616e640c00020000000d0001000000000000000e0000000000000000000f00cdcccccccccc1e40110005000000532e41662e1200040000004e616d2e00080008000000040008000000040000000e000000899596725e9c3c411fec0d5808f248c1799e39a4b7993c4155e30f681af348c19b1af90add983c417b825ae494f448c1cd5c852d089a3c41e4113cb7e1f548c18083500faca13c411934b35fcdfa48c1963d9d14daa13c415f81814d96fc48c156530a50339b3c413bd4b8aa60fd48c1").unwrap();
    let feature = feature_from_u8(&fbuf, 12);
    let geometry = feature.geometry().unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    geometry.to_svg(&mut svg_data, GeometryType::LineString, false);
    assert_eq!(
        std::str::from_utf8(&svg_data).unwrap(),
        r#"<path d="1875038.4476102313 -3269648.6879248763 1874359.6415041967 -3270196.8129848638 1874141.0428635243 -3270953.7840121365 1874440.1778162003 -3271619.4315206874 1876396.0598222911 -3274138.747656357 1876442.0805243007 -3275052.60551469 1874739.312657555 -3275457.333765534 "/>"#
    );

    // ne_10m_geographic_lines.fgb, first feature
    let fbuf = hex::decode("").unwrap();
    let feature = feature_from_u8(&fbuf, 8);
    let geometry = feature.geometry().unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    geometry.to_svg(&mut svg_data, GeometryType::MultiLineString, false);
    assert_eq!(
        std::str::from_utf8(&svg_data).unwrap(),
        r#"<path d="M -20037505.025679983 2692596.21474788 -19924286.672913034 2692596.21474788 -19812966.14702537 2692596.21474788 -19701645.62113772 2692596.21474788 -19590325.09525006 2692596.21474788 -19479004.56936241 2692596.21474788 -19367684.04347475 2692596.21474788 -19256372.576874677 2692596.21474788 -19145042.991699435 2692596.21474788 -19033736.054743163 2692596.21474788 -18922401.939924125 2692596.21474788 -18811090.473324053 2692596.21474788 -18699774.4770802 2692596.21474788 -18588449.421548743 2692596.21474788 -18477128.895661093 2692596.21474788 -18365812.89941723 2692596.21474788 -18254492.373529565 2692596.21474788 -18143167.31799812 2692596.21474788 -18031860.381041847 2692596.21474788 -17920530.795866605 2692596.21474788 -17809219.329266533 2692596.21474788 -17697898.803378873 2692596.21474788 -17586578.277491223 2692596.21474788 -17475257.751603562 2692596.21474788 -17363937.225715913 2692596.21474788 -17252616.69982825 2692596.21474788 -17141296.1739406 2692596.21474788 -17029984.707340535 2692596.21474788 -16918659.651809078 2692596.21474788 -16807343.65556522 2692596.21474788 -16696014.07038997 2692596.21474788 -16584707.133433694 2692596.21474788 -16473382.077902246 2692596.21474788 -16362061.552014597 2692596.21474788 -16250745.55577073 2692596.21474788 -16139425.02988307 2692596.21474788 -16028104.503995419 2692596.21474788 -15916783.978107756 2692596.21474788 -15805472.511507692 2692596.21474788 -15694142.926332444 2692596.21474788 -15582831.459732382 2692596.21474788 -15471510.933844728 2692596.21474788 -15360190.407957068 2692596.21474788 -15248869.882069414 2692596.21474788 -15137549.356181756 2692596.21474788 -15026228.830294106 2692596.21474788 -14914908.304406442 2692596.21474788 -14803587.778518781 2692596.21474788 -14692267.252631132 2692596.21474788 -14580955.78603106 2692596.21474788 -14469630.730499614 2692596.21474788 -14358314.734255752 2692596.21474788 -14246994.20836809 2692596.21474788 -14135678.212124234 2692596.21474788 -14024353.156592779 2692596.21474788 -13913032.630705126 2692596.21474788 -13801716.634461263 2692596.21474788 -13690391.578929815 2692596.21474788 -13579080.112329746 2692596.21474788 -13467755.05679829 2692596.21474788 -13356439.060554435 2692596.21474788 -13245114.005022977 2692596.21474788 -13133802.538422907 2692596.21474788 -13022482.012535257 2692596.21474788 -12911161.4866476 2692596.21474788 -12799840.960759947 2692596.21474788 -12688520.434872286 2692596.21474788 -12577199.908984635 2692596.21474788 -12465883.912740769 2692596.21474788 -12354567.916496906 2692596.21474788 -12243238.33132166 2692596.21474788 -12131926.864721594 2692596.21474788 -12020601.809190147 2692596.21474788 -11909285.812946282 2692596.21474788 -11797969.816702416 2692596.21474788 -11686644.76117097 2692596.21474788 -11575328.764927106 2692596.21474788 -11464008.239039455 2692596.21474788 -11352687.713151794 2692596.21474788 -11241367.187264143 2692596.21474788 -11130051.191020276 2692596.21474788 -11018726.13548883 2692596.21474788 -10907414.668888763 2692596.21474788 -10796094.1430011 2692596.21474788 -10684773.61711345 2692596.21474788 -10573453.091225792 2692596.21474788 -10462132.56533813 2692596.21474788 -10350812.03945048 2692596.21474788 -10239491.513562817 2692596.21474788 -10128170.987675166 2692596.21474788 -10016854.9914313 2692596.21474788 -9905538.995187437 2692596.21474788 -9794209.410012191 2692596.21474788 -9682902.47305592 2692596.21474788 -9571577.417524474 2692596.21474788 -9460261.421280608 2692596.21474788 -9348940.895392958 2692596.21474788 -9237615.8398615 2692596.21474788 -9126299.843617637 2692596.21474788 -9014979.317729987 2692596.21474788 -8903663.321486121 2692596.21474788 -8792338.265954675 2692596.21474788 -8681022.269710807 2692596.21474788 -8569692.684535567 2692596.21474788 -8458385.747579295 2692596.21474788 -8347069.751335428 2692596.21474788 -8235749.225447779 2692596.21474788 -8124424.16991632 2692596.21474788 -8013099.114384874 2692596.21474788 -7901787.647784806 2692596.21474788 -7790467.121897143 2692596.21474788 -7679155.655297086 2692596.21474788 -7567826.070121832 2692596.21474788 -7456510.073877977 2692596.21474788 -7345185.01834652 2692596.21474788 -7233873.551746452 2692596.21474788 -7122553.025858803 2692596.21474788 -7011232.49997114 2692596.21474788 -6899911.97408349 2692596.21474788 -6788586.918552041 2692596.21474788 -6677270.922308178 2692596.21474788 -6565950.396420515 2692596.21474788 -6454638.929820447 2692596.21474788 -6343309.344645206 2692596.21474788 -6231993.34840134 2692596.21474788 -6120677.352157486 2692596.21474788 -6009356.826269826 2692596.21474788 -5898040.83002596 2692596.21474788 -5786715.774494514 2692596.21474788 -5675395.248606861 2692596.21474788 -5564074.722719202 2692596.21474788 -5452754.196831549 2692596.21474788 -5341433.67094389 2692596.21474788 -5230126.733987618 2692596.21474788 -5118797.148812373 2692596.21474788 -5007481.15256851 2692596.21474788 -4896165.156324643 2692596.21474788 -4784844.630436993 2692596.21474788 -4673524.104549334 2692596.21474788 -4562203.578661681 2692596.21474788 -4450883.052774021 2692596.21474788 -4339562.526886369 2692596.21474788 -4228242.000998709 2692596.21474788 -4116935.0640424383 2692596.21474788 -4005600.9492233973 2692596.21474788 -3894289.48262333 2692596.21474788 -3782964.427091881 2692596.21474788 -3671648.4308480173 2692596.21474788 -3560327.904960355 2692596.21474788 -3449011.908716501 2692596.21474788 -3337691.382828842 2692596.21474788 -3226366.327297393 2692596.21474788 -3115050.3310535294 2692596.21474788 -3003729.8051658766 2692596.21474788 -2892418.338565809 2692596.21474788 -2781088.7533905646 2692596.21474788 -2669777.2867904967 2692596.21474788 -2558456.7609028374 2692596.21474788 -2447136.2350151846 2692596.21474788 -2335815.7091275253 2692596.21474788 -2224495.183239872 2692596.21474788 -2113174.657352213 2692596.21474788 -2001854.1314645505 2692596.21474788 -1890533.6055769008 2692596.21474788 -1779213.0796892412 2692596.21474788 -1667901.6130891705 2692596.21474788 -1556581.087201521 2692596.21474788 -1445260.5613138585 2692596.21474788 -1333940.0354262087 2692596.21474788 -1222619.5095385492 2692596.21474788 -1111298.9836508965 2692596.21474788 -999978.457763237 2692596.21474788 -888662.4615193801 2692596.21474788 -777341.9356317207 2692596.21474788 -666025.9393878573 2692596.21474788 -554696.3542126124 2692596.21474788 -443393.94690013694 2692596.21474788 -332073.4210124745 2692596.21474788 -220743.83583723273 2692596.21474788 -109432.36923716537 2692596.21474788 1897.2159380795622 2692596.21474788 113226.80111332452 2692596.21474788 224538.26771339186 2692596.21474788 335876.91217622877 2692596.21474788 447188.37877629616 2692596.21474788 558499.8453763635 2692596.21474788 669820.3712640165 2692596.21474788 781140.8971516758 2692596.21474788 892461.4230393288 2692596.21474788 1003772.8896393961 2692596.21474788 1115111.534102233 2692596.21474788 1226404.882127126 2692596.21474788 1337743.52658995 2692596.21474788 1449064.0524776129 2692596.21474788 1560384.5783652721 2692596.21474788 1671696.04496533 2692596.21474788 1783007.5115654003 2692596.21474788 1894328.0374530598 2692596.21474788 2005648.5633407128 2692596.21474788 2116978.148515964 2692596.21474788 2228289.6151160216 2692596.21474788 2339619.2002912764 2692596.21474788 2450930.666891334 2692596.21474788 2562251.1927789967 2692596.21474788 2673571.718666656 2692596.21474788 2784901.303841901 2692596.21474788 2896212.7704419685 2692596.21474788 3007515.1777544436 2692596.21474788 3118853.822217281 2692596.21474788 3230165.2888173484 2692596.21474788 3341494.8739925832 2692596.21474788 3452797.2813050686 2692596.21474788 3564135.9257678958 2692596.21474788 3675438.333080381 2692596.21474788 3786776.9775432083 2692596.21474788 3898088.444143285 2692596.21474788 4009399.9107433553 2692596.21474788 4120720.4366310053 2692596.21474788 4232040.962518668 2692596.21474788 4343361.488406317 2692596.21474788 4454672.9550063815 2692596.21474788 4566011.599469221 2692596.21474788 4677323.066069286 2692596.21474788 4788643.591956948 2692596.21474788 4899964.117844598 2692596.21474788 5011284.643732261 2692596.21474788 5122596.110332319 2692596.21474788 5233907.576932389 2692596.21474788 5345246.221395223 2692596.21474788 5456548.628707701 2692596.21474788 5567887.273170535 2692596.21474788 5679189.680483013 2692596.21474788 5790519.265658256 2692596.21474788 5901830.732258332 2692596.21474788 6013151.258145982 2692596.21474788 6124471.784033645 2692596.21474788 6235801.36920888 2692596.21474788 6347112.835808957 2692596.21474788 6458433.3616966065 2692596.21474788 6569753.887584269 2692596.21474788 6681074.413471919 2692596.21474788 6792394.939359581 2692596.21474788 6903706.405959652 2692596.21474788 7015035.991134894 2692596.21474788 7126356.517022544 2692596.21474788 7237677.042910206 2692596.21474788 7348988.509510271 2692596.21474788 7460299.976110341 2692596.21474788 7571620.501997991 2692596.21474788 7682941.027885654 2692596.21474788 7794261.5537733035 2692596.21474788 7905573.020373374 2692596.21474788 8016911.664836207 2692596.21474788 8128223.131436277 2692596.21474788 8239543.657323928 2692596.21474788 8350864.18321159 2692596.21474788 8462184.70909924 2692596.21474788 8573496.175699318 2692596.21474788 8684807.642299388 2692596.21474788 8796146.286762215 2692596.21474788 8907457.753362292 2692596.21474788 9018787.338537533 2692596.21474788 9130098.805137604 2692596.21474788 9241419.331025254 2692596.21474788 9352730.797625326 2692596.21474788 9464069.442088157 2692596.21474788 9575371.849400638 2692596.21474788 9686701.434575878 2692596.21474788 9798012.901175942 2692596.21474788 9909333.427063597 2692596.21474788 10020653.952951254 2692596.21474788 10131965.419551326 2692596.21474788 10243295.004726568 2692596.21474788 10354606.471326638 2692596.21474788 10465936.05650188 2692596.21474788 10577256.58238953 2692596.21474788 10688577.108277192 2692596.21474788 10799888.574877262 2692596.21474788 10911218.160052504 2692596.21474788 11022520.567364983 2692596.21474788 11133841.093252633 2692596.21474788 11245179.737715466 2692596.21474788 11356482.145027963 2692596.21474788 11467811.730203198 2692596.21474788 11579123.196803275 2692596.21474788 11690443.722690927 2692596.21474788 11801764.24857859 2692596.21474788 11913093.833753832 2692596.21474788 12024405.300353901 2692596.21474788 12135707.707666373 2692596.21474788 12247046.352129214 2692596.21474788 12358357.818729272 2692596.21474788 12469687.403904526 2692596.21474788 12580998.870504584 2692596.21474788 12692319.39639224 2692596.21474788 12803630.862992309 2692596.21474788 12914969.507455144 2692596.21474788 13026280.9740552 2692596.21474788 13137610.559230454 2692596.21474788 13248912.966542935 2692596.21474788 13360233.492430585 2692596.21474788 13471554.018318245 2692596.21474788 13582865.484918306 2692596.21474788 13694204.129381137 2692596.21474788 13805515.595981209 2692596.21474788 13916836.121868871 2692596.21474788 14028156.64775652 2692596.21474788 14139477.173644185 2692596.21474788 14250788.640244242 2692596.21474788 14362127.284707077 2692596.21474788 14473429.692019572 2692596.21474788 14584741.158619631 2692596.21474788 14696079.803082459 2692596.21474788 14807382.210394945 2692596.21474788 14918711.795570198 2692596.21474788 15030023.262170255 2692596.21474788 15141343.78805791 2692596.21474788 15252664.313945567 2692596.21474788 15364002.9584084 2692596.21474788 15475305.365720881 2692596.21474788 15586634.950896129 2692596.21474788 15697946.417496186 2692596.21474788 15809257.884096257 2692596.21474788 15920587.4692715 2692596.21474788 16031898.93587157 2692596.21474788 16143228.52104681 2692596.21474788 16254549.046934472 2692596.21474788 16365869.572822122 2692596.21474788 16477181.039422194 2692596.21474788 16588510.624597436 2692596.21474788 16699822.091197504 2692596.21474788 16811151.676372748 2692596.21474788 16922454.083685227 2692596.21474788 17033765.550285302 2692596.21474788 17145104.19474813 2692596.21474788 17256415.661348205 2692596.21474788 17367736.18723587 2692596.21474788 17479056.71312352 2692596.21474788 17590377.239011183 2692596.21474788 17701688.70561124 2692596.21474788 17813027.350074075 2692596.21474788 17924338.816674147 2692596.21474788 18035659.3425618 2692596.21474788 18146979.868449457 2692596.21474788 18258282.27576193 2692596.21474788 18369611.86093717 2692596.21474788 18480923.327537242 2692596.21474788 18592261.97200008 2692596.21474788 18703564.379312553 2692596.21474788 18814903.023775388 2692596.21474788 18926205.431087866 2692596.21474788 19037535.01626311 2692596.21474788 19148846.482863177 2692596.21474788 19260167.00875084 2692596.21474788 19371487.53463849 2692596.21474788 19482799.001238555 2692596.21474788 19594128.58641381 2692596.21474788 19705449.112301473 2692596.21474788 19816769.638189115 2692596.21474788 19921404.409836456 2692596.21474788 20037472.002420496 2692596.21474788 Z "/>"#
    );

    // ne_10m_admin_0_country_points.fgb, first feature
    let fbuf = hex::decode("100000000000000008000c0004000800080000005c01000004000000450100000000010000000100020000000200000000000000000003000000000000000000040000000000000000000500020000000000000006000d00000041646d2d3020636f756e74727907000a000000416e7461726374696361080003000000415441090000000000000000000a0000000000000000400b000d000000496e64657465726d696e6174650c000a000000416e74617263746963610d00030000004154410e0000000000000000000f000a000000416e7461726374696361100004000000416e742e11000200000041511300200000004d756c7469706c6520636c61696d732068656c6420696e2061626579616e636514000a000000416e7461726374696361150000000000000000001600000000000040af40170000000000000000001800000000000000000019000200000041511a00030000004154411b0000000000000024400000000800080000000400080000000400000002000000eb3490bc0bf740417df82a4b3d496ec1").unwrap();
    let feature = feature_from_u8(&fbuf, 16);
    let geometry = feature.geometry().unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    geometry.to_svg(&mut svg_data, GeometryType::Point, false);
    assert_eq!(
        std::str::from_utf8(&svg_data).unwrap(),
        r#"<path d="M 2223639.4731508396 -15878634.348995442 Z"/>"#
    );

    // geoz_lod1_gebaeude_max_3d_extract.fgb, first feature
    let fbuf = hex::decode("100000000000000008000c000400080008000000f400000004000000d400000000000800000032303137303131320100070000000000000002000600000047454f5255520300060000004f4b4d4553530400701700000000000005000800000032303039303130310600f8c600120000000007000200000030380800190000007a343161633339636330303030313837652d30302d30303031090033333333331b79400a000000000000a879400b000000000000a879400c000000000000a879400d009f999999999921400e00110000007a343161633339636330303030313837650f000200000042421100040000007265616c14000c0000000000000000000000000007000800140000000000000604000000030000000402000054010000040000001afeffff000000032401000068000000040000000b0000000000000000a879400000000000a879400000000000a879400000000000a879400000000000a879400000000000a8794033333333331b794033333333331b79400000000000a879400000000000a8794033333333331b794000000000160000001d5a642bd878444148e17a54e00a334191ed7cbfd77844418195430bdc0a3341b07268e1d5784441ec51b8bedc0a334148e17a94d6784441cba14556e50a3341d34d6280d87844410e2db29de40a33411d5a642bd878444148e17a54e00a3341d34d6280d87844410e2db29de40a334148e17a94d6784441cba14556e50a334148e17a94d6784441cba14556e50a3341d34d6280d87844410e2db29de40a3341d34d6280d87844410e2db29de40a33410000000002000000060000000b000000000012001000000008000c000000000000000700120000000000000338000000040000000500000033333333331b794033333333331b79400000000000a879400000000000a8794033333333331b7940000000000a00000048e17a94d6784441cba14556e50a3341b07268e1d5784441ec51b8bedc0a3341b07268e1d5784441ec51b8bedc0a334148e17a94d6784441cba14556e50a334148e17a94d6784441cba14556e50a33410000000000001200140008000c0010000000000000000700120000000000000314020000b8000000040000001500000033333333331b794033333333331b794033333333331b794033333333331b794033333333331b794033333333331b794033333333331b794033333333331b79400000000000a879400000000000a8794033333333331b794033333333331b794033333333331b79400000000000a879400000000000a8794033333333331b794033333333331b794033333333331b79400000000000a879400000000000a8794033333333331b7940000000002a0000001d5a642bd878444148e17a54e00a334191ed7cbfd77844418195430bdc0a3341b07268e1d5784441ec51b8bedc0a334148e17a94d6784441cba14556e50a3341d34d6280d87844410e2db29de40a33411d5a642bd878444148e17a54e00a33411d5a642bd878444148e17a54e00a3341d34d6280d87844410e2db29de40a3341d34d6280d87844410e2db29de40a33411d5a642bd878444148e17a54e00a33411d5a642bd878444148e17a54e00a3341b07268e1d5784441ec51b8bedc0a334191ed7cbfd77844418195430bdc0a334191ed7cbfd77844418195430bdc0a3341b07268e1d5784441ec51b8bedc0a3341b07268e1d5784441ec51b8bedc0a334191ed7cbfd77844418195430bdc0a33411d5a642bd878444148e17a54e00a33411d5a642bd878444148e17a54e00a334191ed7cbfd77844418195430bdc0a334191ed7cbfd77844418195430bdc0a33410000000004000000060000000b0000001000000015000000").unwrap();
    let feature = feature_from_u8(&fbuf, 16);
    let geometry = feature.geometry().unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    geometry.to_svg(&mut svg_data, GeometryType::MultiPolygon, false);
    assert_eq!(
        std::str::from_utf8(&svg_data).unwrap(),
        r#"<path d="M 2683312.339 1247968.33 2683311.496 1247964.044 2683307.761 1247964.745 2683309.16 1247973.337 2683313.003 1247972.616 2683312.339 1247968.33 Z M 2683312.339 1247968.33 2683313.003 1247972.616 2683313.003 1247972.616 2683312.339 1247968.33 2683312.339 1247968.33 Z M 2683307.761 1247964.745 2683311.496 1247964.044 2683311.496 1247964.044 2683307.761 1247964.745 2683307.761 1247964.745 Z M 2683311.496 1247964.044 2683312.339 1247968.33 2683312.339 1247968.33 2683311.496 1247964.044 2683311.496 1247964.044 Z "/><path d="M 2683309.16 1247973.337 2683307.761 1247964.745 2683307.761 1247964.745 2683309.16 1247973.337 2683309.16 1247973.337 Z "/><path d="M 2683312.339 1247968.33 2683311.496 1247964.044 2683307.761 1247964.745 2683309.16 1247973.337 2683313.003 1247972.616 2683312.339 1247968.33 Z M 2683313.003 1247972.616 2683309.16 1247973.337 2683309.16 1247973.337 2683313.003 1247972.616 2683313.003 1247972.616 Z "/>"#
    );

    Ok(())
}

#[test]
fn fgb_to_svg() -> std::result::Result<(), std::io::Error> {
    // let f = File::open("../../test/data/countries.fgb")?;
    // let mut filein = BufReader::new(f);
    // let hreader = HeaderReader::read(&mut filein)?;
    // let header = hreader.header();
    // let mut freader = FeatureReader::select_all(&mut filein, &header)?;
    // let mut fout = std::io::BufWriter::new(File::create("/tmp/countries.svg")?);
    // freader.to_svg(&mut filein, &header, 800, 400, &mut fout)?;

    let f = File::open("../../test/data/countries.fgb")?;
    let mut filein = BufReader::new(f);
    let hreader = HeaderReader::read(&mut filein)?;
    let header = hreader.header();

    // countries.fgb, id = ZAF
    let fbuf = hex::decode("100000000000000008000c0004000800080000003c000000040000001b0000000000030000005a414601000c000000536f757468204166726963610014000c0000000000000000000000000007000800140000000000000604000000010000001800000000001200100008000c00000000000000000007001200000000000003f005000004000000bc000000ec2e505260853f40626a4b1de4413dc062da37f757533f4024b6bb07e8663dc02bbea1f0d9e63e402ac423f1f2e83dc00e863aac709f3e4067d47c957c6c3ec02bdd5d67430e3e4083a44fabe8233fc0f6b6990af1ec3c401b498270051640c08b19e1ed41383c4049861c5bcf6240c0c075c58cf0763b4047af06280d9d40c0e63dce34616b3a406d567daeb6ce40c03a596abddfe83940da8f149161d540c08657923cd7c739400b26fe28eaf840c09db81caf402c39407764ac36ffe540c0d87e32c687ad3840b3b27dc85bfe40c0f06ab93313983740dbc2f352b1e540c056444df4f9fc364032056b9c4df540c0fcc401f4fb923640c90391459aee40c02f4d11e0f48a3540f5f6e7a2212141c0f03504c765b03440bada8afd653541c0f27a30293e123440766b990cc76541c04417d4b7cc9d334061ff756eda6841c04a09c1aa7a313340c614ac71363b41c03bc780ecf5da324052b5dd04df3841c0af795567b56c3240dc476e4dbaff40c09126de019e603240ce1b2785791141c09be7887c973e3240f1845e7f12ef40c039622d3e05403240508a56ee05a440c014967840d9ec314069ab92c83e4e40c0f3599e07773f32409259bdc3ed3640c0dc7ef964c538324051f4c0c760a93fc08483bd89219131403a05f9d9c8b93ec0d25625917d103140bbecd79deee03dc06954e0641b103140e6cc76853ee03dc048dfa469505830408f705af0a2933cc0195932c7f2d2304055f99e9108153cc05f251fbb0b383140793d98141f5b3cc0514cde003363314049f59d5f94c83cc0287cb60e0ed631408e03af963bdb3cc06ff1f09e03773240f435cb65a30b3dc0487023658b00334060394206f2f83cc0889e94490de53340a7052ffa0a763cc0a7cd380d51e533402332ace28dc438c0ce18e6046d2a344083f8c08effea38c086730d3334c23440f27a30293ede39c0dfc325c79daa344089601c5c3a7a3ac02e3a596abde334406954e0641bd43ac0f8c610001c9b35409c6ed921feb93ac0cc63cdc8201b3640fe8172dbbe473ac048fc8a355c943640f321a81abdfa39c08d0a9c6c03d3364026fdbd141e8039c0022ec896e54f374022c32adec84439c0a453573ecbbb3740a038807edf6339c05ab91798153638408541994693ab39c0c0ce4d9b710639408ee9094b3cb839c05dc30c8d27aa3940672b2ff99f7c39c09fac18ae0ec439407fde54a4c22c39c08736001b10f1394042d13c8045b238c013ef004f5a7c3a404ca4349bc79d38c071581af851c93a400971e5ec9d3d38c0bbd05ca7911e3b40325706d5069337c05950189469043c401822a7afe7d336c041b96ddfa36e3d401cb3ec49601736c04b22fb20cbd63d40c020e9d32a1a36c0336fd575a8523e407f33315d884536c069c6a2e9eca83e4020274c18cd2636c0fa28232e00313f40f19d98f5624036c0c64d0d349fab3f40ec134031b2a837c07104a9143bee3f402096cd1c925e38c0af3f89cf9dc03f40dff94509fa7b39c0ec4e779e78d63f4097ab1f9be4d739c09966bad749553f40111d024702a939c05e68aed3480b3f400398327040bb39c0271763601df33e4080492a53cc053ac0e42d573f36ad3e40d1419770e8653ac07b4ca4349baf3e400a4b3ca06cbe3ac01a31b3cf63483f40fa9cbb5d2f493bc03cf71e2e39de3f404d13b69f8c2d3bc049a297512c0940409626a5a0dbbb3ac0b5e0455f416a4040535a7f4b00be3ac0b8019f1f464a4040e9f351465c783bc081b3942c273b40407bbc900e0f4d3cc0deae97a6081a4040cd58349d9dc03cc0ec2e505260853f40626a4b1de4413dc008e3a7716ffa3c40dd274701a2f43cc0423ee8d9ac8a3c403718eab0c2a53cc09dd9aed007133c40ce8e54dff9d93cc0a0c211a452883b402461df4e223e3dc0b4226aa2cfff3a40e6cc76853ee03dc073b8567bd8bf3b401074b4aa25a53ec0baf770c9711b3c407461a417b58b3ec022e17b7f834a3c409acc785be9393ec029ed0dbe30d93c40560dc2dcee113ec07fc16ed8b6043d4072e0d57267be3dc069c537143e533d40626a4b1de4413dc008e3a7716ffa3c40dd274701a2f43cc00000000002000000520000005e000000").unwrap();
    let feature = feature_from_u8(&fbuf, 16);
    let mut svg_data: Vec<u8> = Vec::new();
    feature.to_svg(&mut svg_data, GeometryType::MultiPolygon, true);
    assert_eq!(
        std::str::from_utf8(&svg_data).unwrap(),
        r#"<path d="M 31.521001 29.257387 31.325561 29.401978 30.901763 29.909957 30.622813 30.423776 30.055716 31.140269 28.925553 32.172041 28.219756 32.771953 27.464608 33.226964 26.419452 33.61495 25.909664 33.66704 25.780628 33.944646 25.172862 33.796851 24.677853 33.987176 23.594043 33.794474 22.988189 33.916431 22.574157 33.864083 21.542799 34.258839 20.689053 34.417175 20.071261 34.795137 19.616405 34.819166 19.193278 34.462599 18.855315 34.444306 18.424643 33.997873 18.377411 34.136521 18.244499 33.867752 18.25008 33.281431 17.92519 32.611291 18.24791 32.429131 18.221762 31.661633 17.566918 30.725721 17.064416 29.878641 17.062918 29.875954 16.344977 28.576705 16.824017 28.082162 17.218929 28.355943 17.387497 28.783514 17.836152 28.856378 18.464899 29.045462 19.002127 28.972443 19.894734 28.461105 19.895768 24.76779 20.165726 24.917962 20.758609 25.868136 20.66647 26.477453 20.889609 26.828543 21.605896 26.726534 22.105969 26.280256 22.579532 25.979448 22.824271 25.500459 23.312097 25.26869 23.73357 25.390129 24.211267 25.670216 25.025171 25.71967 25.664666 25.486816 25.765849 25.174845 25.941652 24.696373 26.485753 24.616327 26.786407 24.240691 27.11941 23.574323 28.017236 22.827754 29.432188 22.091313 29.839037 22.102216 30.322883 22.271612 30.659865 22.151567 31.191409 22.25151 31.670398 23.658969 31.930589 24.369417 31.752408 25.484284 31.837778 25.843332 31.333158 25.660191 31.04408 25.731452 30.949667 26.022649 30.676609 26.398078 30.685962 26.743845 31.282773 27.285879 31.86806 27.177927 32.071665 26.73382 32.83012 26.742192 32.580265 27.470158 32.462133 28.301011 32.203389 28.752405 31.521001 29.257387 Z M 28.978263 28.955597 28.5417 28.647502 28.074338 28.851469 27.532511 29.242711 26.999262 29.875954 27.749397 30.645106 28.107205 30.545732 28.291069 30.226217 28.8484 30.070051 29.018415 29.743766 29.325166 29.257387 28.978263 28.955597 Z "/>"#
    );

    let mut freader = FeatureReader::select_bbox(&mut filein, &header, 8.8, 47.2, 9.5, 55.3)?;
    let mut svg_data: Vec<u8> = Vec::new();
    freader.to_svg(&mut filein, &header, 800, 400, &mut svg_data)?;
    let out = std::str::from_utf8(&svg_data).unwrap();
    let expected = r#"<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny" width="800" height="400" viewBox="-180 -83.64513 360 169.254168" stroke-linecap="round" stroke-linejoin="round">
<g id="countries">
<path d="M 12.690006 -55.609991 12.089991 -54.800015 11.043543 -55.364864 10.903914 -55.779955 12.370904 -56.111407 12.690006 -55.609991 Z "/><path d="M 10.912182 -56.458621 10.667804 -56.081383 10.369993 -56.190007 9.649985 -55.469999 9.921906 -54.983104 9.282049 -54.830865 8.526229 -54.962744 8.120311 -55.517723 8.089977 -56.540012 8.256582 -56.809969 8.543438 -57.110003 9.424469 -57.172066 9.775559 -57.447941 10.580006 -57.730017 10.546106 -57.215733 10.25 -56.890016 10.369993 -56.609982 10.912182 -56.458621 Z "/>
<path d="M 16.979667 -48.123497 16.903754 -47.714866 16.340584 -47.712902 16.534268 -47.496171 16.202298 -46.852386 16.011664 -46.683611 15.137092 -46.658703 14.632472 -46.431817 13.806475 -46.509306 12.376485 -46.767559 12.153088 -47.115393 11.164828 -46.941579 11.048556 -46.751359 10.442701 -46.893546 9.932448 -46.920728 9.47997 -47.10281 9.632932 -47.347601 9.594226 -47.525058 9.896068 -47.580197 10.402084 -47.302488 10.544504 -47.566399 11.426414 -47.523766 12.141357 -47.703083 12.62076 -47.672388 12.932627 -47.467646 13.025851 -47.637584 12.884103 -48.289146 13.243357 -48.416115 13.595946 -48.877172 14.338898 -48.555305 14.901447 -48.964402 15.253416 -49.039074 16.029647 -48.733899 16.499283 -48.785808 16.960288 -48.596982 16.879983 -48.470013 16.979667 -48.123497 Z "/>
"#;
    assert_eq!(&out[..expected.len()], expected);
    let expected = r#"99.93976 -78.88094 Z "/>
</g>
</svg>"#;
    assert_eq!(&out[svg_data.len() - expected.len()..], expected);

    Ok(())
}

#[allow(dead_code)]
async fn http_svg_async() {
    let mut client = BufferedHttpClient::new("https://pkg.sourcepole.ch/countries.fgb");
    let hreader = HttpHeaderReader::read(&mut client).await.unwrap();
    let header = hreader.header();

    let mut freader = HttpFeatureReader::select_all(&header, hreader.header_len())
        .await
        .unwrap();
    let mut svg_data: Vec<u8> = Vec::new();
    freader
        .to_svg(&mut client, &header, 800, 400, &mut svg_data)
        .await
        .unwrap();
    let out = std::str::from_utf8(&svg_data).unwrap();
    let expected = r#"<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny" width="800" height="400" viewBox="-180 -83.64513 360 169.254168" stroke-linecap="round" stroke-linejoin="round">
<g id="countries">
<path d="M -59.572095 80.040179 -59.865849 80.549657 -60.159656 81.000327 -62.255393 80.863178 -64.488125 80.921934 -65.741666 80.588827 -65.741666 80.549657 -66.290031 80.255773 -64.037688 80.294944 -61.883246 80.39287 -61.138976 79.981371 -60.610119 79.628679 -59.572095 80.040179 Z "/><path d="M -159.208184 79.497059 -161.127601 79.634209 -162.439847 79.281465 -163.027408 78.928774 -163.066604 78.869966 -163.712896 78.595667 -163.712896 78.595667 -163.105801 78.223338 -161.245113 78.380176 -160.246208 78.693645 -159.482405 79.046338 -159.208184 79.497059 Z "/><path d="M -45.154758 78.04707 -43.920828 78.478103 -43.48995 79.08556 -43.372438 79.516645 -43.333267 80.026123 -44.880537 80.339644 -46.506174 80.594357 -48.386421 80.829485 -50.482107 81.025442 -52.851988 80.966685 -54.164259 80.633528 -53.987991 80.222028 -51.853134 79.94773 -50.991326 79.614623 -50.364595 79.183487 -49.914131 78.811209 -49.306959 78.458569 -48.660616 78.047018 -48.660616 78.047019 -48.151396 78.04707 -46.662857 77.831476 -45.154758 78.04707 Z "/><path d="M -121.211511 73.50099 -119.918851 73.657725 -118.724143 73.481353 -119.292119 73.834097 -120.232217 74.08881 -121.62283 74.010468 -122.621735 73.657778 -122.621735 73.657777 -122.406245 73.324619 -121.211511 73.50099 Z "/><path d="M -125.559566 73.481353 -124"#;
    assert_eq!(&out[..expected.len()], expected);
}

// #[test]
// fn http_svg() {
//     tokio::runtime::Runtime::new()
//         .unwrap()
//         .block_on(http_svg_async());
// }
