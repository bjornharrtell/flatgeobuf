// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from 'flatbuffers'

/**
 * @enum {number}
 */
export enum GeometryType{
  Point= 0,
  MultiPoint= 1,
  LineString= 2,
  MultiLineString= 3,
  Polygon= 4,
  MultiPolygon= 5
};

/**
 * @enum {number}
 */
export enum ColumnType{
  Byte= 0,
  UByte= 1,
  Bool= 2,
  Short= 3,
  UShort= 4,
  Int= 5,
  UInt= 6,
  Long= 7,
  ULong= 8,
  Float= 9,
  Double= 10,
  String= 11,
  Json= 12,
  DateTime= 13
};

/**
 * @constructor
 */
export class Column {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Column
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Column {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Column= obj
 * @returns Column
 */
static getRoot(bb:flatbuffers.ByteBuffer, obj?:Column):Column {
  return (obj || new Column).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns ColumnType
 */
type():ColumnType {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : ColumnType.Byte;
};

/**
 * @param flatbuffers.Builder builder
 */
static start(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ColumnType type
 */
static addType(builder:flatbuffers.Builder, type:ColumnType) {
  builder.addFieldInt8(1, type, ColumnType.Byte);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  builder.requiredField(offset, 4); // name
  return offset;
};

static create(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, type:ColumnType):flatbuffers.Offset {
  Column.start(builder);
  Column.addName(builder, nameOffset);
  Column.addType(builder, type);
  return Column.end(builder);
}
}
/**
 * @constructor
 */
export class Header {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Header
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Header {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Header= obj
 * @returns Header
 */
static getRoot(bb:flatbuffers.ByteBuffer, obj?:Header):Header {
  return (obj || new Header).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @returns number
 */
envelope(index: number):number|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
envelopeLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
envelopeArray():Float64Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns GeometryType
 */
geometryType():GeometryType {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : GeometryType.Point;
};

/**
 * @returns number
 */
dimensions():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 2;
};

/**
 * @param number index
 * @param Column= obj
 * @returns Column
 */
columns(index: number, obj?:Column):Column|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Column).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
columnsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns flatbuffers.Long
 */
featuresCount():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @returns boolean
 */
fids():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @returns number
 */
indexNodeSize():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 16;
};

/**
 * @returns number
 */
srsCode():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
srsOrg():string|null
srsOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
srsOrg(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static start(builder:flatbuffers.Builder) {
  builder.startObject(10);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset envelopeOffset
 */
static addEnvelope(builder:flatbuffers.Builder, envelopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, envelopeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createEnvelopeVector(builder:flatbuffers.Builder, data:number[] | Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startEnvelopeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param GeometryType geometryType
 */
static addGeometryType(builder:flatbuffers.Builder, geometryType:GeometryType) {
  builder.addFieldInt8(2, geometryType, GeometryType.Point);
};

/**
 * @param flatbuffers.Builder builder
 * @param number dimensions
 */
static addDimensions(builder:flatbuffers.Builder, dimensions:number) {
  builder.addFieldInt8(3, dimensions, 2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset columnsOffset
 */
static addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, columnsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startColumnsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long featuresCount
 */
static addFeaturesCount(builder:flatbuffers.Builder, featuresCount:flatbuffers.Long) {
  builder.addFieldInt64(5, featuresCount, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean fids
 */
static addFids(builder:flatbuffers.Builder, fids:boolean) {
  builder.addFieldInt8(6, +fids, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param number indexNodeSize
 */
static addIndexNodeSize(builder:flatbuffers.Builder, indexNodeSize:number) {
  builder.addFieldInt16(7, indexNodeSize, 16);
};

/**
 * @param flatbuffers.Builder builder
 * @param number srsCode
 */
static addSrsCode(builder:flatbuffers.Builder, srsCode:number) {
  builder.addFieldInt32(8, srsCode, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset srsOrgOffset
 */
static addSrsOrg(builder:flatbuffers.Builder, srsOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, srsOrgOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

static create(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, envelopeOffset:flatbuffers.Offset, geometryType:GeometryType, dimensions:number, columnsOffset:flatbuffers.Offset, featuresCount:flatbuffers.Long, fids:boolean, indexNodeSize:number, srsCode:number, srsOrgOffset:flatbuffers.Offset):flatbuffers.Offset {
  Header.start(builder);
  Header.addName(builder, nameOffset);
  Header.addEnvelope(builder, envelopeOffset);
  Header.addGeometryType(builder, geometryType);
  Header.addDimensions(builder, dimensions);
  Header.addColumns(builder, columnsOffset);
  Header.addFeaturesCount(builder, featuresCount);
  Header.addFids(builder, fids);
  Header.addIndexNodeSize(builder, indexNodeSize);
  Header.addSrsCode(builder, srsCode);
  Header.addSrsOrg(builder, srsOrgOffset);
  return Header.end(builder);
}
}
