// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatGeobuf
{

using global::System;
using global::FlatBuffers;

public struct Crs : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Crs GetRootAsCrs(ByteBuffer _bb) { return GetRootAsCrs(_bb, new Crs()); }
  public static Crs GetRootAsCrs(ByteBuffer _bb, Crs obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Crs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Org { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrgBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetOrgBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOrgArray() { return __p.__vector_as_array<byte>(4); }
  public int Code { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }
  public string Wkt { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWktBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetWktBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetWktArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Crs> CreateCrs(FlatBufferBuilder builder,
      StringOffset orgOffset = default(StringOffset),
      int code = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset wktOffset = default(StringOffset)) {
    builder.StartObject(5);
    Crs.AddWkt(builder, wktOffset);
    Crs.AddDescription(builder, descriptionOffset);
    Crs.AddName(builder, nameOffset);
    Crs.AddCode(builder, code);
    Crs.AddOrg(builder, orgOffset);
    return Crs.EndCrs(builder);
  }

  public static void StartCrs(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddOrg(FlatBufferBuilder builder, StringOffset orgOffset) { builder.AddOffset(0, orgOffset.Value, 0); }
  public static void AddCode(FlatBufferBuilder builder, int code) { builder.AddInt(1, code, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static void AddWkt(FlatBufferBuilder builder, StringOffset wktOffset) { builder.AddOffset(4, wktOffset.Value, 0); }
  public static Offset<Crs> EndCrs(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Crs>(o);
  }
};


}
